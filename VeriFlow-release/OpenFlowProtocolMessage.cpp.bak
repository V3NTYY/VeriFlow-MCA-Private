/*
* OpenFlowProtocolMessage.cpp
*
*  Created on: Mar 12, 2012
*      Author: khurshid
*/

#include "OpenFlowProtocolMessage.h"
#include "openflow.h"
#include "xtoxll.h"
#include "Network.h"
#include "VeriFlow.h"
#include <cstdlib>
#include "sys/time.h"

using namespace std;

bool OpenFlowProtocolMessage::process(const char* data, ProxyConnectionInfo& info, FILE* fp, int& msgCnt)
{
	bool shouldSend = true;
        const ofp_header* header = (const ofp_header*)data;
	switch(header->type)
	{
	case OFPT_HELLO:
		// OpenFlowProtocolMessage::processHello(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_ERROR:
		// OpenFlowProtocolMessage::processError(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_ECHO_REQUEST:
		// OpenFlowProtocolMessage::processEchoRequest(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_ECHO_REPLY:
		// OpenFlowProtocolMessage::processEchoReply(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_VENDOR:
		// OpenFlowProtocolMessage::processVendor(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_FEATURES_REQUEST:
		// OpenFlowProtocolMessage::processFeaturesRequest(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_FEATURES_REPLY:
		OpenFlowProtocolMessage::processFeaturesReply(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_GET_CONFIG_REQUEST:
		/// OpenFlowProtocolMessage::processGetConfigRequest(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_GET_CONFIG_REPLY:
		/// OpenFlowProtocolMessage::processGetConfigReply(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_SET_CONFIG:
		// OpenFlowProtocolMessage::processSetConfig(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_PACKET_IN:
		// OpenFlowProtocolMessage::processPacketIn(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_FLOW_REMOVED:
		OpenFlowProtocolMessage::processFlowRemoved(data, info, fp, msgCnt);
		/// fprintf(fp, "\n");
		break;

	case OFPT_PORT_STATUS:
		// OpenFlowProtocolMessage::processPortStatus(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_PACKET_OUT:
		// OpenFlowProtocolMessage::processPacketOut(data, info, fp);
		// fprintf(fp, "\n");
		break;

	case OFPT_FLOW_MOD:
		//OpenFlowProtocolMessage::processFlowMod(data, info, fp);
		shouldSend = OpenFlowProtocolMessage::processFlowMod(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_PORT_MOD:
		/// OpenFlowProtocolMessage::processPortMod(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_STATS_REQUEST:
		/// OpenFlowProtocolMessage::processStatsRequest(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_STATS_REPLY:
		shouldSend = OpenFlowProtocolMessage::processStatsReply(data, info, fp, msgCnt);
		/// fprintf(fp, "\n");
		break;

	case OFPT_BARRIER_REQUEST:
		/// OpenFlowProtocolMessage::processBarrierRequest(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_BARRIER_REPLY:
		/// OpenFlowProtocolMessage::processBarrierReply(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_QUEUE_GET_CONFIG_REQUEST:
		/// OpenFlowProtocolMessage::processQueueGetConfigRequest(data, info, fp);
		/// fprintf(fp, "\n");
		break;

	case OFPT_QUEUE_GET_CONFIG_REPLY:
		/// OpenFlowProtocolMessage::processQueueGetConfigReply(data, info, fp);
		/// fprintf(fp, "\n");
		break;
	}
        return shouldSend;
}

void OpenFlowProtocolMessage::processHeader(const ofp_header* header, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[Header] version %u type %u length %u xid %u\n",
	///		header->version, header->type, ntohs(header->length), ntohl(header->xid));
}

void OpenFlowProtocolMessage::processHello(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[Hello]\n");
}

void OpenFlowProtocolMessage::processError(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	const ofp_error_msg* oem = (const ofp_error_msg*)data;

	OpenFlowProtocolMessage::processHeader(&(oem->header), info, fp);

	/// fprintf(fp, "[Error] type %u code %u\n", ntohs(oem->type), ntohs(oem->code));

	/* struct ofp_error_msg {
	    struct ofp_header header;

	    uint16_t type;
	    uint16_t code;
	    uint8_t data[0];
	}; */
}

void OpenFlowProtocolMessage::processEchoRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[EchoRequest]\n");
}

void OpenFlowProtocolMessage::processEchoReply(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[EchoReply]\n");
}

void OpenFlowProtocolMessage::processVendor(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	const ofp_vendor_header* ovh = (const ofp_vendor_header*)data;

	OpenFlowProtocolMessage::processHeader(&(ovh->header), info, fp);

	/// fprintf(fp, "[Vendor] vendor %u\n", ntohl(ovh->vendor));

	// struct ofp_vendor_header {
	//     struct ofp_header header;   /* Type OFPT_VENDOR. */
	//     uint32_t vendor;            /* Vendor ID:
	//                                  * - MSB 0: low-order bytes are IEEE OUI.
	//                                  * - MSB != 0: defined by OpenFlow
	//                                  *   consortium. */
	//     /* Vendor-defined arbitrary additional data. */
	// };
	// OFP_ASSERT(sizeof(struct ofp_vendor_header) == 12);
}

void OpenFlowProtocolMessage::processFeaturesRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[FeaturesRequest]\n");
}

void OpenFlowProtocolMessage::processFeaturesReply(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	const ofp_switch_features* osf = (const ofp_switch_features*)data;

	OpenFlowProtocolMessage::processHeader(&(osf->header), info, fp);

	pthread_mutex_lock(info.veriflowMutex);
	info.veriflow->setDatapathId(info.clientAddress.sin_port, ntohll(osf->datapath_id));
	pthread_mutex_unlock(info.veriflowMutex);
	/// fprintf(fp, "DatapathId: %llu\n", info.veriflow->getDatapathId(info.clientAddress.sin_port));

	/// fprintf(fp, "[FeaturesReply] datapath_id %llu n_buffers %u n_tables %u capabilities %u actions %u\n",
	///		ntohll(osf->datapath_id), ntohl(osf->n_buffers), osf->n_tables, ntohl(osf->capabilities),
	///		ntohl(osf->actions));

	/// int portCount = (ntohs(osf->header.length) - sizeof(ofp_switch_features)) / sizeof(ofp_phy_port);
	/// fprintf(fp, "[PortCount] %d\n", portCount);

	// struct ofp_switch_features {
	//    struct ofp_header header;
	//    uint64_t datapath_id;   /* Datapath unique ID.  The lower 48-bits are for
	//                               a MAC address, while the upper 16-bits are
	//                               implementer-defined. */

	//    uint32_t n_buffers;     /* Max packets buffered at once. */

	//    uint8_t n_tables;       /* Number of tables supported by datapath. */
	//    uint8_t pad[3];         /* Align to 64-bits. */

	    /* Features. */
	//    uint32_t capabilities;  /* Bitmap of support "ofp_capabilities". */
	//    uint32_t actions;       /* Bitmap of supported "ofp_action_type"s. */

	    /* Port info.*/
	//    struct ofp_phy_port ports[0];  /* Port definitions.  The number of ports
	//                                      is inferred from the length field in
	//                                      the header. */
	// };
}

void OpenFlowProtocolMessage::processGetConfigRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[GetConfigRequest]\n");
}

void OpenFlowProtocolMessage::processGetConfigReply(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[GetConfigReply]\n");
}

void OpenFlowProtocolMessage::processSetConfig(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	const ofp_switch_config* osc = (const ofp_switch_config*)data;

	OpenFlowProtocolMessage::processHeader(&(osc->header), info, fp);

	/// fprintf(fp, "[SetConfig] flags %u miss_send_len %u\n", ntohs(osc->flags), ntohs(osc->miss_send_len));

	// struct ofp_switch_config {
	//     struct ofp_header header;
	//     uint16_t flags;             /* OFPC_* flags. */
	//     uint16_t miss_send_len;     /* Max bytes of new flow that datapath should
	//                                    send to the controller. */
	// };
}

void OpenFlowProtocolMessage::processPacketIn(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[PacketIn]\n");
}

void OpenFlowProtocolMessage::processFlowRemoved(const char* data, ProxyConnectionInfo& info, FILE* fp, int& msgCnt)
{
        //cout << "Removed" << endl;
	const ofp_flow_removed* ofr = (const ofp_flow_removed*)data;
	//pthread_mutex_lock(info.veriflowMutex);
        //int phase1Cnt = info.veriflow->decrePhaseOneCnt(); //only reply of flowmod would decrease the cnt
        //int phase1Cnt = info.veriflow->getPhaseOneCnt();
        //cout << "[FlowRemoved] removed phase1cnt:" << phase1Cnt << endl;
        //if (phase1Cnt == 0){
          //if (osr->flags != 9)
          //change flowRemoved msg
        //}
	//pthread_mutex_unlock(info.veriflowMutex);

	OpenFlowProtocolMessage::processHeader(&(ofr->header), info, fp);
	OpenFlowProtocolMessage::processMatch(&(ofr->match), info, fp);

	/// fprintf(fp, "[FlowRemoved] cookie %llu priority %u reason %u duration_sec %u duration_nsec %u idle_timeout %u packet_count %llu byte_count %llu\n",
	///		ntohll(ofr->cookie), ntohs(ofr->priority), ofr->reason, ntohl(ofr->duration_sec),
	///		ntohl(ofr->duration_nsec), ntohs(ofr->idle_timeout), ntohll(ofr->packet_count), ntohll(ofr->byte_count));

	// remove rule from veriflow database

	/// fprintf(fp, "Looking up datapathId %llu\n", info.veriflow->getDatapathId(info.clientAddress.sin_port));
	//pthread_mutex_lock(info.veriflowMutex);
	uint64_t datapathId = info.veriflow->getDatapathId(info.clientAddress.sin_port);
	//pthread_mutex_unlock(info.veriflowMutex);

	pthread_mutex_lock(info.networkMutex);
	string deviceIpAddress = info.network->getDeviceIpAddress(datapathId);
	pthread_mutex_unlock(info.networkMutex);
	/// fprintf(fp, "Found address %s\n", deviceIpAddress.c_str());

	Rule rule, rule1;
	//rule.type = ACTIVE;
	rule.wildcards = ntohl(ofr->match.wildcards);

	//rule.fieldValue[IN_PORT] = ::convertIntToString(ntohs(ofr->match.in_port));
        rule.fieldValue[IN_PORT] = "20";
	rule.fieldMask[IN_PORT] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_IN_PORT) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_SRC] = ::getMacValueAsString(ofr->match.dl_src); // "0:0:0:0:0:0";
	rule.fieldMask[DL_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_SRC) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_DST] = ::getMacValueAsString(ofr->match.dl_dst); // "0:0:0:0:0:0";
	rule.fieldMask[DL_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_DST) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_TYPE] = ::convertIntToString(ntohs(ofr->match.dl_type));
	rule.fieldMask[DL_TYPE] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_TYPE) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_VLAN] = ::convertIntToString(ntohs(ofr->match.dl_vlan));
	rule.fieldMask[DL_VLAN] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN) != 0)) ? "0" : "4095";

	rule.fieldValue[DL_VLAN_PCP] = ::convertIntToString(ofr->match.dl_vlan_pcp);
	rule.fieldMask[DL_VLAN_PCP] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN_PCP) != 0)) ? "0" : "7";

	rule.fieldValue[MPLS_LABEL] = "0";
	rule.fieldMask[MPLS_LABEL] = "0";

	rule.fieldValue[MPLS_TC] = "0";
	rule.fieldMask[MPLS_TC] = "0";

	rule.fieldValue[NW_SRC] = ::getIpValueAsString(ntohl(ofr->match.nw_src));
	rule.fieldMask[NW_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_SRC_MASK) != 0)) ? "0.0.0.0" : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_src_mask));

	rule.fieldValue[NW_DST] = ::getIpValueAsString(ntohl(ofr->match.nw_dst));
	rule.fieldMask[NW_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_DST_MASK) != 0)) ? "0.0.0.0." : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_dst_mask));

	rule.fieldValue[NW_PROTO] = ::convertIntToString(ofr->match.nw_proto);
	rule.fieldMask[NW_PROTO] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_PROTO) != 0)) ? "0" : "255";

	rule.fieldValue[NW_TOS] = ::convertIntToString(ofr->match.nw_tos);
	rule.fieldMask[NW_TOS] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_TOS) != 0)) ? "0" : "63";

	rule.fieldValue[TP_SRC] = ::convertIntToString(ntohs(ofr->match.tp_src));
	rule.fieldMask[TP_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_SRC) != 0)) ? "0" : "65535";

	rule.fieldValue[TP_DST] = ::convertIntToString(ntohs(ofr->match.tp_dst));
	rule.fieldMask[TP_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_DST) != 0)) ? "0" : "65535";

	rule.location = deviceIpAddress;
	rule.priority = ntohs(ofr->priority);
	// rule.nextHop = info.network->getNextHopIpAddress(deviceIpAddress, ntohs(oao->port));

	// rule.computeEquivalenceClass();
	//cout << "[FlowRemoved]" << rule.toString()<< endl;

	double updateTime = 0, packetClassSearchTime = 0, graphBuildTime = 0, queryTime = 0;
	bool reachability = false;
	unsigned long ecCount = 0; 

	// gettimeofday(&start, NULL);
        //bool re = true;
	pthread_mutex_lock(info.veriflowMutex);
        //if (rule.location == "10.0.0.102" && 
          //  rule.fieldValue[NW_SRC]=="10.0.0.2" &&
          //  rule.fieldValue[NW_DST]=="10.0.0.5")
	  //cout << "[FlowRemoved]" << rule.toString() << endl;
        #ifdef OUTPUT_LOG
	cout << "[FlowRemoved]" << rule.toString() << endl;
        #endif
	//info.veriflow->outputUpdates(rule, rule.command);
        info.veriflow->dgraph.confirmLink(rule, info, msgCnt);
/*      string lo;
	info.veriflow->verifyRule(rule, rule.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 2, lo);
        //while (re && !info.veriflow->bufRules.empty()){
        BufferedRules::iterator tmpItr, bufItr = info.veriflow->bufRules.begin(); 
        while (bufItr != info.veriflow->bufRules.end()){
          //cout << "[FlowRemoved][newbuffered]" << bufItr->first.toString() << endl;
	  Rule rule1 = bufItr->first;
          if (rule1.overlaps(rule)){
            bool off_verify = false;
            if (!info.network->isConnectedToSrc(rule1.fieldValue[NW_SRC], rule1.location))
              off_verify = true;
            if( info.veriflow->verifyRule(rule1, rule1.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 1, lo, off_verify) ){
//#ifdefUTPUT_LOG
	        cout << "[FlowRemoved][buffered]" << rule1.toString()<< endl;
//#endif
                msgCnt++;
                //info.veriflow->bufferedMsgs.pop_front();
                info.veriflow->toSendMsgs.push_back(bufItr->second);
                bufItr = info.veriflow->bufRules.erase(bufItr);
            }
            else
              ++bufItr;
          }else
            ++bufItr;
        }          
        */
/*
        while (re && !info.veriflow->bufferedMsgs.empty()){
          rule1 = info.veriflow->bufferedMsgs.front();
          if (!rule1.overlaps(rule)){
            break;
          }
	  //info.veriflow->outputUpdates(rule1, rule1.command);
          bool off_verify = false;
          if (!info.network->isConnectedToSrc(rule1.fieldValue[NW_SRC], rule1.location))
            off_verify = true;
          re = info.veriflow->verifyRule(rule1, rule1.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 1, off_verify);
          if (re){
#ifdef OUTPUT_LOG
	    cout << "[FlowRemoved][buffered]" << rule1.toString()<< endl;
#endif
            msgCnt++;
            info.veriflow->bufferedMsgs.pop_front();
            info.veriflow->bufRules.erase(rule1);
          }
	}
*/
	// info.veriflow->verifyRule(rule, OFPT_FLOW_REMOVED, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp);
	//info.veriflow->removeRule(rule);
	pthread_mutex_unlock(info.veriflowMutex);
}

void OpenFlowProtocolMessage::processPortStatus(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[PortStatus]\n");
}

void OpenFlowProtocolMessage::processPacketOut(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[PacketOut]\n");
}

//bool OpenFlowProtocolMessage::processFlowMod(const char* data, ProxyConnectionInfo& info, FILE* fp, int& msgCnt)
bool OpenFlowProtocolMessage::processFlowMod(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
        const ofp_flow_mod* ofm = (const ofp_flow_mod*)data;
	OpenFlowProtocolMessage::processHeader(&(ofm->header), info, fp);
	OpenFlowProtocolMessage::processMatch(&(ofm->match), info, fp);

	pthread_mutex_lock(info.veriflowMutex);
	uint64_t datapathId = info.veriflow->getDatapathId(info.clientAddress.sin_port);
	pthread_mutex_unlock(info.veriflowMutex);
        
        //fprintf(stderr, "header length %u", ntohs(ofm->header.length));
        //struct timeval now;
        //if (datapathId == 101 && 
        /*if (ntohs(ofm->command) == OFPFC_MODIFY && ntohs(ofm->priority) > 0){
          //gettimeofday(&now, NULL);
          //cout << "start_wait_time: " << now.tv_sec*1000000 + now.tv_usec << endl;
          //fprintf(stdout, "start_wait_time: %ld\n", now.tv_sec*1000000 + now.tv_usec);
          pthread_mutex_lock(info.veriflowMutex);
          info.veriflow->setPhaseOneCnt(ntohs(ofm->priority));
          //#ifdef OUTPUT_LOG
          //cout << "[FlowMod]set phase1Cnt as " << info.veriflow->getPhaseOneCnt() << endl;
          //#endif
          pthread_mutex_unlock(info.veriflowMutex);
          return false;
        }*/

	
	/// fprintf(fp, "[FlowMod] cookie %llu command %u idle_timeout %u hard_timeout %u priority %u buffer_id %u out_port %u flags %u\n",
	///		ntohll(ofm->cookie), ntohs(ofm->command), ntohs(ofm->idle_timeout), ntohs(ofm->hard_timeout),
	///		ntohs(ofm->priority), ntohl(ofm->buffer_id), ntohs(ofm->out_port), ntohs(ofm->flags));

	Rule rule, rule1;
	//rule.type = ACTIVE;
	rule.wildcards = ntohl(ofm->match.wildcards);
	rule.command = ntohs(ofm->command);

	//rule.fieldValue[IN_PORT] = ::convertIntToString(ntohs(ofm->match.in_port));
        rule.fieldValue[IN_PORT] = "20";
        rule.fieldMask[IN_PORT] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_IN_PORT) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_SRC] = ::getMacValueAsString(ofm->match.dl_src); // "0:0:0:0:0:0";
	rule.fieldMask[DL_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_SRC) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_DST] = ::getMacValueAsString(ofm->match.dl_dst); // "0:0:0:0:0:0";
	rule.fieldMask[DL_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_DST) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_TYPE] = ::convertIntToString(ntohs(ofm->match.dl_type));
	rule.fieldMask[DL_TYPE] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_TYPE) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_VLAN] = ::convertIntToString(ntohs(ofm->match.dl_vlan));
	rule.fieldMask[DL_VLAN] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN) != 0)) ? "0" : "4095";

	rule.fieldValue[DL_VLAN_PCP] = ::convertIntToString(ofm->match.dl_vlan_pcp);
	rule.fieldMask[DL_VLAN_PCP] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN_PCP) != 0)) ? "0" : "7";

	rule.fieldValue[MPLS_LABEL] = "0";
	rule.fieldMask[MPLS_LABEL] = "0";

	rule.fieldValue[MPLS_TC] = "0";
	rule.fieldMask[MPLS_TC] = "0";

	rule.fieldValue[NW_SRC] = ::getIpValueAsString(ntohl(ofm->match.nw_src));
	rule.fieldMask[NW_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_SRC_MASK) != 0)) ? "0.0.0.0" : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_src_mask));

	rule.fieldValue[NW_DST] = ::getIpValueAsString(ntohl(ofm->match.nw_dst));
	rule.fieldMask[NW_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_DST_MASK) != 0)) ? "0.0.0.0." : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_dst_mask));

	rule.fieldValue[NW_PROTO] = ::convertIntToString(ofm->match.nw_proto);
	rule.fieldMask[NW_PROTO] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_PROTO) != 0)) ? "0" : "255";

	rule.fieldValue[NW_TOS] = ::convertIntToString(ofm->match.nw_tos);
	rule.fieldMask[NW_TOS] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_TOS) != 0)) ? "0" : "63";

	rule.fieldValue[TP_SRC] = ::convertIntToString(ntohs(ofm->match.tp_src));
	rule.fieldMask[TP_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_SRC) != 0)) ? "0" : "65535";

	rule.fieldValue[TP_DST] = ::convertIntToString(ntohs(ofm->match.tp_dst));
	rule.fieldMask[TP_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_DST) != 0)) ? "0" : "65535";

	/// fprintf(fp, "Looking up datapathId %llu\n", info.veriflow->getDatapathId(info.clientAddress.sin_port));

	pthread_mutex_lock(info.networkMutex);
	string deviceIpAddress = info.network->getDeviceIpAddress(datapathId);
	pthread_mutex_unlock(info.networkMutex);
	/// fprintf(fp, "Found address %s\n", deviceIpAddress.c_str());

	rule.location = deviceIpAddress;
	rule.priority = ntohs(ofm->priority);
	rule.outPort = ntohs(ofm->out_port);
	// rule.nextHop = info.network->getNextHopIpAddress(deviceIpAddress, ntohs(oao->port));

	// rule.computeEquivalenceClass();
        
	int actionCount = (ntohs(ofm->header.length) - sizeof(ofp_flow_mod)) / sizeof(ofp_action_header);
	/// fprintf(fp, "[ActionCount] %d\n", actionCount);

	if(actionCount > 0)
	{
		const ofp_action_header* actionHeader = (const ofp_action_header*)ofm->actions;
		for(int i = 0; i < actionCount; i++)
		{
			Action action;
			action.type = ntohs(actionHeader[i].type);

			if(action.type == OFPAT_OUTPUT)
			{
				const ofp_action_output* oao = (const ofp_action_output*)&(actionHeader[i]);
				/// fprintf(fp, "[Output] type %u len %u port %u max_len %u\n",
				///		ntohs(oao->type), ntohs(oao->len), ntohs(oao->port), ntohs(oao->max_len));

				action.value = ntohs(oao->port);
				rule.nextHop = info.network->getNextHopIpAddress(deviceIpAddress, ntohs(oao->port));
			}
			else if(action.type == OFPAT_SET_VLAN_VID)
			{
				const ofp_action_vlan_vid* oavv = (const ofp_action_vlan_vid*)&(actionHeader[i]);
				action.value = ntohs(oavv->vlan_vid);
			}
			else if(action.type == OFPAT_SET_VLAN_PCP)
			{
				const ofp_action_vlan_pcp* oavp = (const ofp_action_vlan_pcp*)&(actionHeader[i]);
				action.value = oavp->vlan_pcp;
			}
			else if(action.type == OFPAT_STRIP_VLAN)
			{

			}
			else if((action.type == OFPAT_SET_DL_SRC) || (action.type == OFPAT_SET_DL_DST))
			{
				const ofp_action_dl_addr* oada = (const ofp_action_dl_addr*)&(actionHeader[i]);
				action.value = ::getMacValueAsInt(::getMacValueAsString(oada->dl_addr));
			}
			else if((action.type == OFPAT_SET_NW_SRC) || (action.type == OFPAT_SET_NW_DST))
			{
				const ofp_action_nw_addr* oana = (const ofp_action_nw_addr*)&(actionHeader[i]);
				action.value = ntohl(oana->nw_addr);
			}
			else if(action.type == OFPAT_SET_NW_TOS)
			{
				const ofp_action_nw_tos* oant = (const ofp_action_nw_tos*)&(actionHeader[i]);
				action.value = oant->nw_tos;
			}
			else if((action.type == OFPAT_SET_TP_SRC) || (action.type == OFPAT_SET_TP_DST))
			{
				const ofp_action_tp_port* oatp = (const ofp_action_tp_port*)&(actionHeader[i]);
				action.value = ntohs(oatp->tp_port);
			}
			else if(action.type == OFPAT_ENQUEUE)
			{

			}
			else if(action.type == OFPAT_VENDOR)
			{
				const ofp_action_vendor_header* oavh = (const ofp_action_vendor_header*)&(actionHeader[i]);
				action.value = ntohl(oavh->vendor);
			}
                        else if (action.type == OFPAT_VERIFLOW_SEQ)
                        {
                        }
			else
			{
				fprintf(stderr, "[OpenFlowProtocolMessage::processFlowMod] Unknown action type (%d). Terminating process.\n", action.type);
				exit(1);
			}

			rule.vActions.push_back(action);
		}
	}

	// verify flow rule and add to veriflow database

	double updateTime = 0, packetClassSearchTime = 0, graphBuildTime = 0, queryTime = 0;
	bool reachability = false;
	unsigned long ecCount = 0;

        bool flag = false;
        
        bool off_verify = false;
        if (!info.network->isConnectedToSrc(rule.fieldValue[NW_SRC],deviceIpAddress))
          off_verify = true;
        //if (rule.command != OFPFC_ADD)
          //off_verify = true;
        pthread_mutex_lock(info.veriflowMutex);
        #ifdef OUTPUT_LOG
	cout << "[FlowMod]" << datapathId << " " << rule.toString() << endl;
        #endif
        string lo;
        flag = info.veriflow->verifyRule(rule, rule.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 1, lo, off_verify);
        /*if(!flag){
          std::string msg(data, data + ntohs(ofm->header.length));
          //info.veriflow->bufferedMsgs.push_back(rule);
          //info.veriflow->toSendMsgs.push_back(std::make_pair(info.recvSocket, msg));
          info.veriflow->bufRules.insert( make_pair(rule, make_pair(info.recvSocket, msg)) );
          #ifdef OUTPUT_LOG
          cout << "# of buffered msgs: " << info.veriflow->bufRules.size() << endl;
          #endif
        }*/
        string msg(data, data + ntohs(ofm->header.length));
        DependencyLink link(rule, info.recvSocket, msg, lo);
        info.veriflow->dgraph.addLink(link, flag);
	pthread_mutex_unlock(info.veriflowMutex);
        return flag;
        //return true;
}

void OpenFlowProtocolMessage::processPortMod(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[PortMod]\n");
}

void OpenFlowProtocolMessage::processStatsRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[StatsRequest]\n");
}

bool OpenFlowProtocolMessage::processStatsReply(const char* data, ProxyConnectionInfo& info, FILE* fp, int& msgCnt)
{
        const ofp_stats_reply *osr = (const ofp_stats_reply*)data;
        if (osr->flags != 6){
          //cout << "[StatsReply] normal" << endl;
          return true;
        }
	/*struct timeval now;
        pthread_mutex_lock(info.veriflowMutex);
        int phase1Cnt = info.veriflow->decrePhaseOneCnt();
        if (phase1Cnt == 0){
          gettimeofday(&now, NULL);
          cout << "finish_wait_time: " << now.tv_sec*1000000 + now.tv_usec << endl;
          //fprintf(stdout, "finish_wait_time: %ld\n", now.tv_sec*1000000 + now.tv_usec);
        }
	pthread_mutex_unlock(info.veriflowMutex);*/
	const ofp_flow_mod* ofm = (const ofp_flow_mod*)osr->body;

	OpenFlowProtocolMessage::processHeader(&(ofm->header), info, fp);
	OpenFlowProtocolMessage::processMatch(&(ofm->match), info, fp);

	//printf("[FlowReply] cookie %llu command %u idle_timeout %u hard_timeout %u priority %u buffer_id %u out_port %u flags %u\n",
	//		ntohll(ofm->cookie), ntohs(ofm->command), ntohs(ofm->idle_timeout), ntohs(ofm->hard_timeout),
	//		ntohs(ofm->priority), ntohl(ofm->buffer_id), ntohs(ofm->out_port), ntohs(ofm->flags));

	Rule rule, rule1;
	//rule.type = ACTIVE;
	rule.wildcards = ntohl(ofm->match.wildcards);

	rule.command = ntohs(ofm->command);

	//rule.fieldValue[IN_PORT] = ::convertIntToString(ntohs(ofm->match.in_port));
        rule.fieldValue[IN_PORT] = "20";
	rule.fieldMask[IN_PORT] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_IN_PORT) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_SRC] = ::getMacValueAsString(ofm->match.dl_src); // "0:0:0:0:0:0";
	rule.fieldMask[DL_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_SRC) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_DST] = ::getMacValueAsString(ofm->match.dl_dst); // "0:0:0:0:0:0";
	rule.fieldMask[DL_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_DST) != 0)) ? "0:0:0:0:0:0" : "FF:FF:FF:FF:FF:FF";

	rule.fieldValue[DL_TYPE] = ::convertIntToString(ntohs(ofm->match.dl_type));
	rule.fieldMask[DL_TYPE] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_TYPE) != 0)) ? "0" : "65535";

	rule.fieldValue[DL_VLAN] = ::convertIntToString(ntohs(ofm->match.dl_vlan));
	rule.fieldMask[DL_VLAN] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN) != 0)) ? "0" : "4095";

	rule.fieldValue[DL_VLAN_PCP] = ::convertIntToString(ofm->match.dl_vlan_pcp);
	rule.fieldMask[DL_VLAN_PCP] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_DL_VLAN_PCP) != 0)) ? "0" : "7";

	rule.fieldValue[MPLS_LABEL] = "0";
	rule.fieldMask[MPLS_LABEL] = "0";

	rule.fieldValue[MPLS_TC] = "0";
	rule.fieldMask[MPLS_TC] = "0";

	rule.fieldValue[NW_SRC] = ::getIpValueAsString(ntohl(ofm->match.nw_src));
	rule.fieldMask[NW_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_SRC_MASK) != 0)) ? "0.0.0.0" : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_src_mask));

	rule.fieldValue[NW_DST] = ::getIpValueAsString(ntohl(ofm->match.nw_dst));
	rule.fieldMask[NW_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_DST_MASK) != 0)) ? "0.0.0.0." : "255.255.255.255"; // getIpValueAsString(ntohl(ofr->match.nw_dst_mask));

	rule.fieldValue[NW_PROTO] = ::convertIntToString(ofm->match.nw_proto);
	rule.fieldMask[NW_PROTO] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_PROTO) != 0)) ? "0" : "255";

	rule.fieldValue[NW_TOS] = ::convertIntToString(ofm->match.nw_tos);
	rule.fieldMask[NW_TOS] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_NW_TOS) != 0)) ? "0" : "63";

	rule.fieldValue[TP_SRC] = ::convertIntToString(ntohs(ofm->match.tp_src));
	rule.fieldMask[TP_SRC] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_SRC) != 0)) ? "0" : "65535";

	rule.fieldValue[TP_DST] = ::convertIntToString(ntohs(ofm->match.tp_dst));
	rule.fieldMask[TP_DST] = ((rule.wildcards == OFPFW_ALL) || ((rule.wildcards & OFPFW_TP_DST) != 0)) ? "0" : "65535";

//	printf("Looking up datapathId %llu\n", info.veriflow->getDatapathId(info.clientAddress.sin_port));
	//pthread_mutex_lock(info.veriflowMutex);
	uint64_t datapathId = info.veriflow->getDatapathId(info.clientAddress.sin_port);
	//pthread_mutex_unlock(info.veriflowMutex);

	pthread_mutex_lock(info.networkMutex);
	string deviceIpAddress = info.network->getDeviceIpAddress(datapathId);
	pthread_mutex_unlock(info.networkMutex);
	//fprintf(fp, "Found address %s\n", deviceIpAddress.c_str());
	//printf("Found address %s\n", deviceIpAddress.c_str());

	rule.location = deviceIpAddress;
	rule.priority = ntohs(ofm->priority);
	rule.outPort = ntohs(ofm->out_port);
	// rule.nextHop = info.network->getNextHopIpAddress(deviceIpAddress, ntohs(oao->port));

	// rule.computeEquivalenceClass();

	int actionCount = (ntohs(ofm->header.length) - sizeof(ofp_flow_mod)) / sizeof(ofp_action_header);
	//fprintf(fp, "[ActionCount] %d\n", actionCount);

	if(actionCount > 0)
	{
		const ofp_action_header* actionHeader = (const ofp_action_header*)ofm->actions;
		for(int i = 0; i < actionCount; i++)
		{
			Action action;
			action.type = ntohs(actionHeader[i].type);

			if(action.type == OFPAT_OUTPUT)
			{
				const ofp_action_output* oao = (const ofp_action_output*)&(actionHeader[i]);
				//fprintf(fp, "[Output] type %u len %u port %u max_len %u\n",
				//		ntohs(oao->type), ntohs(oao->len), ntohs(oao->port), ntohs(oao->max_len));

				action.value = ntohs(oao->port);
				rule.nextHop = info.network->getNextHopIpAddress(deviceIpAddress, ntohs(oao->port));
			}
			else if(action.type == OFPAT_SET_VLAN_VID)
			{
				const ofp_action_vlan_vid* oavv = (const ofp_action_vlan_vid*)&(actionHeader[i]);
				action.value = ntohs(oavv->vlan_vid);
			}
			else if(action.type == OFPAT_SET_VLAN_PCP)
			{
				const ofp_action_vlan_pcp* oavp = (const ofp_action_vlan_pcp*)&(actionHeader[i]);
				action.value = oavp->vlan_pcp;
			}
			else if(action.type == OFPAT_STRIP_VLAN)
			{

			}
			else if((action.type == OFPAT_SET_DL_SRC) || (action.type == OFPAT_SET_DL_DST))
			{
				const ofp_action_dl_addr* oada = (const ofp_action_dl_addr*)&(actionHeader[i]);
				action.value = ::getMacValueAsInt(::getMacValueAsString(oada->dl_addr));
			}
			else if((action.type == OFPAT_SET_NW_SRC) || (action.type == OFPAT_SET_NW_DST))
			{
				const ofp_action_nw_addr* oana = (const ofp_action_nw_addr*)&(actionHeader[i]);
				action.value = ntohl(oana->nw_addr);
			}
			else if(action.type == OFPAT_SET_NW_TOS)
			{
				const ofp_action_nw_tos* oant = (const ofp_action_nw_tos*)&(actionHeader[i]);
				action.value = oant->nw_tos;
			}
			else if((action.type == OFPAT_SET_TP_SRC) || (action.type == OFPAT_SET_TP_DST))
			{
				const ofp_action_tp_port* oatp = (const ofp_action_tp_port*)&(actionHeader[i]);
				action.value = ntohs(oatp->tp_port);
			}
			else if(action.type == OFPAT_ENQUEUE)
			{

			}
			else if(action.type == OFPAT_VENDOR)
			{
				const ofp_action_vendor_header* oavh = (const ofp_action_vendor_header*)&(actionHeader[i]);
				action.value = ntohl(oavh->vendor);
			}
                        else if (action.type == OFPAT_VERIFLOW_SEQ)
                        {
                        }
			else
			{
				fprintf(stderr, "[OpenFlowProtocolMessage::processFlowReply] Unknown action type (%d). Terminating process.\n", action.type);
				exit(1);
			}

			rule.vActions.push_back(action);
		}
	}

	// verify flow rule and add to veriflow database

	double updateTime = 0, packetClassSearchTime = 0, graphBuildTime = 0, queryTime = 0;
	bool reachability = false;
	unsigned long ecCount = 0;
        
        //bool re = true;
        //int phase1Cnt = 0;
	pthread_mutex_lock(info.veriflowMutex);
        #ifdef OUTPUT_LOG
	cout << "[StatsReply]" << rule.toString() << endl;
        #endif
	//info.veriflow->outputUpdates(rule, rule.command);
        info.veriflow->dgraph.confirmLink(rule, info, msgCnt);
/*      
	string lo;
        info.veriflow->verifyRule(rule, rule.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 2, lo);
        BufferedRules::iterator bufItr = info.veriflow->bufRules.begin();
        while (bufItr != info.veriflow->bufRules.end()){
	  Rule rule1 = bufItr->first;
	  if (rule1.overlaps(rule)){
            bool off_verify = false;
            if (!info.network->isConnectedToSrc(rule1.fieldValue[NW_SRC], rule1.location))
              off_verify = true;
            bool re = info.veriflow->verifyRule(rule1, rule1.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 1, lo, off_verify);
            if (re){
#ifdef OUTPUT_LOG
	        cout << "[StatsReply][buffered & verified]" << rule1.toString()<< endl;
#endif
                msgCnt++;
                //info.veriflow->bufferedMsgs.pop_front();
                info.veriflow->toSendMsgs.push_back(bufItr->second);
                bufItr = info.veriflow->bufRules.erase(bufItr);
                //cout << " size of buf " << info.veriflow->bufRules.size() << endl;
            }
            else
                ++bufItr;
          }else
            ++bufItr;
        }
*/
/*
        while (re && !info.veriflow->bufferedMsgs.empty()){
          rule1 = info.veriflow->bufferedMsgs.front();
          if (!rule1.overlaps(rule)){
	    //cout << "[StatsReply][not overlapped]" << endl;
            break;
          }
#ifdef OUTPUT_LOG
	  cout << "[StatsReply][buffered]" << rule1.toString() << endl;
#endif
	  //info.veriflow->outputUpdates(rule1, rule1.command);
          bool off_verify = false;
          if (!info.network->isConnectedToSrc(rule1.fieldValue[NW_SRC], rule1.location))
            off_verify = true;
          re = info.veriflow->verifyRule(rule1, rule1.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp, 1, off_verify);
          if (re){
	    //cout << "[StatsReply][buffered]" << rule1.toString() << endl;
	    msgCnt++;
	    info.veriflow->bufferedMsgs.pop_front();
            info.veriflow->bufRules.erase(rule1);
          }
	}
*/
	//info.veriflow->verifyRule(rule, rule.command, updateTime, packetClassSearchTime, graphBuildTime, queryTime, reachability, ecCount, fp);
	// info.veriflow->addRule(rule);
	pthread_mutex_unlock(info.veriflowMutex);

	/// fprintf(fp, "[StatsReply]\n");
        return false;
}

void OpenFlowProtocolMessage::processBarrierRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[BarrierRequest]\n");
}

void OpenFlowProtocolMessage::processBarrierReply(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[BarrierReply]\n");
}

void OpenFlowProtocolMessage::processQueueGetConfigRequest(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[QueueGetConfigRequest]\n");
}

void OpenFlowProtocolMessage::processQueueGetConfigReply(const char* data, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[QueueGetConfigReply]\n");
}

void OpenFlowProtocolMessage::processMatch(const ofp_match* match, ProxyConnectionInfo& info, FILE* fp)
{
	/// fprintf(fp, "[Match] wildcards %u in_port %u dl_src %02x:%02x:%02x:%02x:%02x:%02x dl_dst %02x:%02x:%02x:%02x:%02x:%02x",
	///		ntohl(match->wildcards), ntohs(match->in_port),
	///		match->dl_src[0], match->dl_src[1], match->dl_src[2],
	///		match->dl_src[3], match->dl_src[4], match->dl_src[5],
	///		match->dl_dst[0], match->dl_dst[1], match->dl_dst[2],
	///		match->dl_dst[3], match->dl_dst[4], match->dl_dst[5]);

	/// fprintf(fp, " dl_vlan %u dl_vlan_pcp %u dl_type %u nw_tos %u nw_proto %u nw_src %u nw_dst %u tp_src %u tp_dst %u\n",
	///		ntohs(match->dl_vlan), match->dl_vlan_pcp, ntohs(match->dl_type),
	///		match->nw_tos, match->nw_proto,
	///		ntohl(match->nw_src), ntohl(match->nw_dst),
	///		ntohs(match->tp_src), ntohs(match->tp_dst));
}
